#!/usr/bin/env ruby

# This service runs as root and allows authorized users to specify a version of
# the rnbo OSCQuery runner to install.

require "dbus"

URI_BASE = "com.cycling74.rnbo"
RUNNER_PACKAGE_NAME = "rnbooscquery"

#https://www.debian.org/doc/debian-policy/ch-controlfields.html#version
VERSION_VALID_REGEX = /\A(?:\d+:)?\d[[:alnum:]\.\+-~]*?(?:-[[:alnum:]\+\.~]+)?\z/

ENV['DEBIAN_FRONTEND'] = 'noninteractive'

SEMAPHORE = Mutex.new

def exec_cmds(cmds)
  cmds.each do |cmd|
    raise DBus.error, "Failed to execute cmd #{cmd}" unless system(*cmd)
  end
end

class RNBOUpdater < DBus::Object
  dbus_signal :InstallStatus, "active:b, status:s"

  dbus_interface URI_BASE do
    dbus_method :install_runner, "in version:s, in upgrade_other:b" do |version, upgrade|
      #assert version format
      raise "#{version} not in allowed format" unless version =~ VERSION_VALID_REGEX
      #kick off a thread so we can return immediately
      Thread.new do
        #lock so we don't try to do any other updates before we complete
        SEMAPHORE.synchronize do
          self.InstallStatus(true, "installing rnbooscquery")
          exec_cmds([
            %w{apt-get -y update},
            %w{apt-get install -y --allow-change-held-packages --allow-downgrades}.append("#{RUNNER_PACKAGE_NAME}=#{version}"),
            %w{apt-mark hold}.append(RUNNER_PACKAGE_NAME),
          ])

          #shall we upgrade other services?
          if upgrade
            self.InstallStatus(true, "upgrade other")
            exec_cmds([ %w{apt-get -y upgrade} ])
            #do we need to reboot?
            if File.exists?("/var/run/reboot-required")
              self.InstallStatus(false, "update complete, rebooting")
              system("reboot")
              return
            end
          end
          self.InstallStatus(false, "update complete")
        end
      end
    end

    dbus_method :update_system do
      #kick off a thread so we can return immediately
      Thread.new do
        #lock a semaphore so we don't try to install the runner before we complete
        SEMAPHORE.synchronize do
          exec_cmds([
            %w{apt-get -y update},
            %w{apt-get -y upgrade}
          ])
        end
      end
    end

    #TODO signal when there are updates available?
  end
end

bus = DBus::SystemBus.instance
service = bus.request_service(URI_BASE)
myobj = RNBOUpdater.new("/#{URI_BASE.gsub('.', '/')}")
service.export(myobj)

main = DBus::Main.new
main << bus
main.run
