#!/usr/bin/env ruby

# This service runs as root and allows authorized users to specify a version of
# the rnbo OSCQuery runner to install.

require "dbus"

URI_BASE = "com.cycling74.rnbo"
RUNNER_PACKAGE_NAME = "rnbooscquery"

#https://www.debian.org/doc/debian-policy/ch-controlfields.html#version
VERSION_VALID_REGEX = /\A(?:\d+:)?\d[[:alnum:]\.\+-~]*?(?:-[[:alnum:]\+\.~]+)?\z/

ENV['DEBIAN_FRONTEND'] = 'noninteractive'

def exec_cmds(cmds)
  cmds.each do |cmd|
    raise DBus.error, "Failed to execute cmd #{cmd}" unless system(*cmd)
  end
end

class RNBOUpdater < DBus::Object
  dbus_interface URI_BASE do
    dbus_method :install_runner, "in version:s" do |version|
      #assert version format
      raise "#{version} not in allowed format" unless version =~ VERSION_VALID_REGEX
      exec_cmds([
        %w{apt-get -y update},
        %w{apt-get install -y --allow-change-held-packages --allow-downgrades}.append("#{RUNNER_PACKAGE_NAME}=#{version}"),
        %w{apt-mark hold}.append(RUNNER_PACKAGE_NAME),
      ])
    end

    dbus_method :update_system do
      exec_cmds([
        %w{apt-get -y update},
        %w{apt-get -y upgrade}
      ])
    end

    #TODO signal when there are updates available?
  end
end

bus = DBus::SystemBus.instance
service = bus.request_service(URI_BASE)
myobj = RNBOUpdater.new("/#{URI_BASE.gsub('.', '/')}")
service.export(myobj)

main = DBus::Main.new
main << bus
main.run
